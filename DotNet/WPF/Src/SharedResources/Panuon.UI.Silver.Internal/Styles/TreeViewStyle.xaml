<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.UI.Silver"
                    xmlns:core="clr-namespace:Panuon.UI.Core;assembly=Panuon.UI.Core"
                    xmlns:i="clr-namespace:Panuon.UI.Silver.Internal"
                    xmlns:rs="clr-namespace:Panuon.UI.Silver.Resources"
                    xmlns:irs="clr-namespace:Panuon.UI.Silver.Internal.Resources">
    <ResourceDictionary.MergedDictionaries>
        <core:SharedResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Styles/ToggleButtonStyle.xaml" />
        <core:SharedResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Templates/TreeViewTemplate.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=ToggleArrowToggleButtonStyle, TypeInTargetAssembly={x:Type local:TreeViewHelper}}"
           TargetType="ToggleButton"
           BasedOn="{StaticResource {x:Static rs:StyleKeys.ToggleButtonStyle}}">
        <Setter Property="Foreground"
                Value="{Binding Path=(local:TreeViewItemHelper.ToggleBrush), RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
        <Setter Property="local:ToggleButtonHelper.HoverBackground"
                Value="{x:Null}" />
        <Setter Property="local:ToggleButtonHelper.CheckedBackground"
                Value="{x:Null}" />
        <Setter Property="local:ToggleButtonHelper.HoverForeground"
                Value="{Binding Path=(local:TreeViewItemHelper.HoverToggleBrush), RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
        <Setter Property="local:ToggleButtonHelper.CheckedForeground"
                Value="{Binding Path=(local:TreeViewItemHelper.ExpandedToggleBrush), RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
        <Setter Property="local:ToggleButtonHelper.CheckedContent"
                Value="&#xe94a;" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="2,0" />
        <Setter Property="FontFamily"
                Value="/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
        <Setter Property="FontSize"
                Value="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="Content"
                Value="&#xe949;" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                               Value="False" />
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewItemHelper.SelectedToggleBrush), Converter={StaticResource {x:Static rs:ConverterKeys.IsNonnullConverter}}, RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:TreeViewItemHelper.SelectedToggleBrush), RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static rs:StyleKeys.TreeViewStyle}"
           TargetType="TreeView">
        <Setter Property="local:IconHelper.FontFamily"
                Value="{Binding IconFontFamily, Source={x:Static local:GlobalSettings.Setting}}" />
        <Setter Property="local:IconHelper.FontSize"
                Value="{Binding IconFontSize, Source={x:Static local:GlobalSettings.Setting}}" />
        <Setter Property="local:IconHelper.Margin"
                Value="0,0,5,0" />
        <Setter Property="local:TreeViewItemHelper.InternalPadding"
                Value="{Binding Path=(local:TreeViewHelper.ItemsPadding), Converter={StaticResource {x:Static irs:ConverterKeys.TreeViewInternalPaddingConverter}}, RelativeSource={RelativeSource Self}}" />
        <Setter Property="local:TreeViewHelper.ItemsPadding"
                Value="15,0,0,0" />
        <Setter Property="local:TreeViewHelper.ItemsBackground"
                Value="Transparent" />
        <Setter Property="local:TreeViewHelper.ItemsHoverBackground"
                Value="#FAFAFA" />
        <Setter Property="local:TreeViewHelper.ItemsSelectedBackground"
                Value="#F1F1F1" />
        <Setter Property="local:TreeViewHelper.ToggleArrowToggleButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=ToggleArrowToggleButtonStyle, TypeInTargetAssembly={x:Type local:TreeViewHelper}}}" />
        <Setter Property="local:TreeViewHelper.ItemsSeparatorBrush"
                Value="LightGray" />
        <Setter Property="local:TreeViewHelper.ItemsSeparatorThickness"
                Value="1" />
        <Setter Property="local:TreeViewHelper.ItemsSeparatorVisibility"
                Value="Collapsed" />
        <Setter Property="local:TreeViewHelper.ItemsRulerLineBrush"
                Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="local:TreeViewHelper.ItemsRulerLineThickness" 
                Value="1" />
        <Setter Property="local:TreeViewHelper.ItemsRulerLineVisiblity"
                Value="None" />
        <Setter Property="local:TreeViewHelper.ItemsExpandedToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedToggleBrush), Converter={StaticResource {x:Static irs:ConverterKeys.TreeViewInternalPaddingConverter}}, RelativeSource={RelativeSource Self}}" />
        <Setter Property="local:TreeViewHelper.ItemsToggleBrush"
                Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Template"
                Value="{StaticResource {x:Static irs:TemplateKeys.TreeViewTemplate}}" />
        <Style.Triggers>
            <Trigger Property="local:ListBoxHelper.Scrollable"
                     Value="False">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static irs:TemplateKeys.TreeViewNonScrollableTemplate}}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="{Binding DisabledOpacity, Source={x:Static local:GlobalSettings.Setting}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>
